const jwt = require("jsonwebtoken");
const { sql, poolPromise } = require("../db");
require("dotenv").config();

/**
 * üõ°Ô∏è Middleware: X√°c th·ª±c token v√† l·∫•y th√¥ng tin user t·ª´ DB
 */
const verifyToken = async (req, res, next) => {
  try {
    // 1Ô∏è‚É£ L·∫•y token t·ª´ header
    const authHeader = req.headers["authorization"];
    const token = authHeader && authHeader.split(" ")[1]; // Bearer <token>

    if (!token) {
      return res.status(401).json({ message: "Unauthorized: missing user token" });
    }

    // 2Ô∏è‚É£ Gi·∫£i m√£ token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    if (!decoded?.id) {
      return res.status(403).json({ message: "Invalid token payload" });
    }

    // 3Ô∏è‚É£ Truy v·∫•n user th·∫≠t t·ª´ DB (ƒë·∫£m b·∫£o user v·∫´n t·ªìn t·∫°i v√† l·∫•y ƒë∆∞·ª£c role)
    const pool = await poolPromise;
    const result = await pool.request()
      .input("user_id", sql.Int, decoded.id)
      .query("SELECT user_id AS id, full_name, email, role FROM Users WHERE user_id = @user_id");

    const user = result.recordset[0];
    if (!user) {
      return res.status(404).json({ message: "User not found in system" });
    }

    // 4Ô∏è‚É£ G·∫Øn th√¥ng tin user v√†o req ƒë·ªÉ c√°c API kh√°c d√πng
    req.user = user;

    next(); // ‚úÖ Cho ph√©p ƒëi ti·∫øp
  } catch (err) {
    console.error("‚ùå verifyToken error:", err.message);
    return res.status(403).json({ message: "Token is invalid or expired" });
  }
};

/**
 * üîê Middleware: Ki·ªÉm tra quy·ªÅn truy c·∫≠p
 * @param  {...string} roles Danh s√°ch quy·ªÅn ƒë∆∞·ª£c ph√©p (vd: 'admin', 'employee', 'customer')
 */
const authorizeRoles = (...roles) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({ message: "Unauthorized: missing user data" });
    }
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: "You do not have access to this functionality" });
    }
    next();
  };
};

module.exports = { verifyToken, authorizeRoles };

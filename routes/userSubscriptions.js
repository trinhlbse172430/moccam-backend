const express = require("express");
const router = express.Router();
const { sql, poolPromise } = require("../db");
const { verifyToken, authorizeRoles } = require("../security/verifyToken");

/**
 * @swagger
 * tags:
 *   name: UserSubscriptions
 *   description: üíé Qu·∫£n l√Ω g√≥i ƒëƒÉng k√Ω c·ªßa ng∆∞·ªùi d√πng (User Subscriptions)
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     UserSubscription:
 *       type: object
 *       properties:
 *         user_subscription_id:
 *           type: integer
 *           example: 15
 *         user_id:
 *           type: integer
 *           example: 3
 *         plan_id:
 *           type: integer
 *           example: 2
 *         status:
 *           type: string
 *           enum: [active, expired, canceled, pending]
 *           example: "active"
 *         start_date:
 *           type: string
 *           format: date-time
 *           example: "2025-10-01T00:00:00Z"
 *         end_date:
 *           type: string
 *           format: date-time
 *           example: "2025-11-01T00:00:00Z"
 *         plan_name:
 *           type: string
 *           example: "Premium Monthly Plan"
 *         full_name:
 *           type: string
 *           example: "Nguyen Van A"
 */

/* ===========================================================
   üü¢ GET /api/user-subscriptions
   ‚Üí Admin/Employee xem to√†n b·ªô, Customer ch·ªâ xem c·ªßa ch√≠nh h·ªç
=========================================================== */
/**
 * @swagger
 * /api/user-subscriptions:
 *   get:
 *     summary: üìã L·∫•y danh s√°ch g√≥i ƒëƒÉng k√Ω ng∆∞·ªùi d√πng
 *     tags: [UserSubscriptions]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Danh s√°ch g√≥i ƒëƒÉng k√Ω tr·∫£ v·ªÅ th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/UserSubscription'
 *       401:
 *         description: Kh√¥ng c√≥ ho·∫∑c token kh√¥ng h·ª£p l·ªá
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */
router.get("/", verifyToken, authorizeRoles("admin", "employee", "customer"), async (req, res) => {
  try {
    const pool = await poolPromise;
    let query = `
      SELECT us.*, u.full_name, sp.plan_name
      FROM UserSubscriptions us
      JOIN Users u ON us.user_id = u.user_id
      JOIN SubscriptionPlans sp ON us.plan_id = sp.plan_id
    `;
    const request = pool.request();

    if (req.user.role === "customer") {
      query += ` WHERE us.user_id = @user_id`;
      request.input("user_id", sql.Int, req.user.id);
    }

    query += ` ORDER BY us.start_date DESC`;
    const result = await request.query(query);

    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå Error in GET /user-subscriptions:", err.message);
    res.status(500).json({ message: "Server error" });
  }
});

/* ===========================================================
   üü¢ GET /api/user-subscriptions/:id
   ‚Üí Xem chi ti·∫øt 1 g√≥i ƒëƒÉng k√Ω c·ª• th·ªÉ
=========================================================== */
/**
 * @swagger
 * /api/user-subscriptions/{id}:
 *   get:
 *     summary: üîç Xem chi ti·∫øt m·ªôt g√≥i ƒëƒÉng k√Ω c·ª• th·ªÉ
 *     tags: [UserSubscriptions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa b·∫£n ghi g√≥i ƒëƒÉng k√Ω
 *     responses:
 *       200:
 *         description: Chi ti·∫øt g√≥i ƒëƒÉng k√Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UserSubscription'
 *       403:
 *         description: Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y g√≥i ƒëƒÉng k√Ω
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */
router.get("/:id", verifyToken, authorizeRoles("admin", "employee", "customer"), async (req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request()
      .input("user_subscription_id", sql.Int, req.params.id)
      .query(`
        SELECT us.*, u.full_name, sp.plan_name
        FROM UserSubscriptions us
        JOIN Users u ON us.user_id = u.user_id
        JOIN SubscriptionPlans sp ON us.plan_id = sp.plan_id
        WHERE us.user_subscription_id = @user_subscription_id
      `);

    if (result.recordset.length === 0)
      return res.status(404).json({ message: "User subscription not found" });

    const subscription = result.recordset[0];

    // üîí Customer ch·ªâ ƒë∆∞·ª£c xem c·ªßa ch√≠nh h·ªç
    if (req.user.role === "customer" && subscription.user_id !== req.user.id)
      return res.status(403).json({ message: "You can only view your own subscriptions." });

    res.json(subscription);
  } catch (err) {
    console.error("‚ùå Error in GET /user-subscriptions/:id:", err.message);
    res.status(500).json({ message: "Server error" });
  }
});

/* ===========================================================
   üü° PUT /api/user-subscriptions/:id/cancel
   ‚Üí H·ªßy g√≥i ƒëƒÉng k√Ω (Customer/Admin/Employee)
=========================================================== */
/**
 * @swagger
 * /api/user-subscriptions/{id}/cancel:
 *   put:
 *     summary: ‚ùå H·ªßy g√≥i ƒëƒÉng k√Ω ƒëang ho·∫°t ƒë·ªông
 *     tags: [UserSubscriptions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa g√≥i ƒëƒÉng k√Ω c·∫ßn h·ªßy
 *     responses:
 *       200:
 *         description: H·ªßy g√≥i ƒëƒÉng k√Ω th√†nh c√¥ng
 *         content:
 *           application/json:
 *             example:
 *               message: "‚úÖ Subscription canceled successfully."
 *       400:
 *         description: Kh√¥ng th·ªÉ h·ªßy g√≥i kh√¥ng ·ªü tr·∫°ng th√°i active
 *       403:
 *         description: Kh√¥ng c√≥ quy·ªÅn h·ªßy g√≥i n√†y
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y g√≥i ƒëƒÉng k√Ω
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */
router.put("/:id/cancel", verifyToken, authorizeRoles("admin", "employee", "customer"), async (req, res) => {
  try {
    const pool = await poolPromise;

    const subResult = await pool.request()
      .input("user_subscription_id", sql.Int, req.params.id)
      .query("SELECT * FROM UserSubscriptions WHERE user_subscription_id = @user_subscription_id");

    if (subResult.recordset.length === 0)
      return res.status(404).json({ message: "User subscription not found" });

    const subscription = subResult.recordset[0];

    // üîí Customer ch·ªâ ƒë∆∞·ª£c h·ªßy c·ªßa ch√≠nh h·ªç
    if (req.user.role === "customer" && subscription.user_id !== req.user.id)
      return res.status(403).json({ message: "You can only cancel your own subscriptions." });

    if (subscription.status !== "active")
      return res.status(400).json({ message: `Cannot cancel a subscription with status '${subscription.status}'.` });

    await pool.request()
      .input("user_subscription_id", sql.Int, req.params.id)
      .query("UPDATE UserSubscriptions SET status = 'canceled' WHERE user_subscription_id = @user_subscription_id");

    res.json({ message: "‚úÖ Subscription canceled successfully." });
  } catch (err) {
    console.error("‚ùå Error in PUT /user-subscriptions/:id/cancel:", err.message);
    res.status(500).json({ message: "Server error" });
  }
});

module.exports = router;

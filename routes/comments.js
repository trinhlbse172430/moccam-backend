const express = require("express");
const router = express.Router();
const { sql, poolPromise } = require("../db");
const { verifyToken, authorizeRoles } = require("../security/verifyToken");

/**
 * @swagger
 * tags:
 *   name: Comments
 *   description: API qu·∫£n l√Ω b√¨nh lu·∫≠n v√† ƒë√°nh gi√° b√†i h·ªçc t·ª´ ng∆∞·ªùi d√πng
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     Comment:
 *       type: object
 *       properties:
 *         comment_id:
 *           type: integer
 *           example: 101
 *         customer_id:
 *           type: integer
 *           example: 12
 *         lesson_id:
 *           type: integer
 *           example: 7
 *         comment:
 *           type: string
 *           example: "B√†i h·ªçc r·∫•t hay v√† d·ªÖ hi·ªÉu!"
 *         rate:
 *           type: integer
 *           example: 5
 *         created_at:
 *           type: string
 *           format: date-time
 *           example: "2025-10-10T09:00:00Z"
 *         customer_name:
 *           type: string
 *           example: "Nguyen Van A"
 *         lesson_name:
 *           type: string
 *           example: "B√†i 1: Nh·∫≠p m√¥n ƒë√†n tranh"
 *
 *     CreateCommentRequest:
 *       type: object
 *       required:
 *         - customer_id
 *         - lesson_id
 *         - comment
 *         - rate
 *       properties:
 *         customer_id:
 *           type: integer
 *           example: 12
 *         lesson_id:
 *           type: integer
 *           example: 7
 *         comment:
 *           type: string
 *           example: "Video gi·∫£ng d·∫°y r·∫•t d·ªÖ hi·ªÉu v√† chi ti·∫øt!"
 *         rate:
 *           type: integer
 *           minimum: 1
 *           maximum: 5
 *           example: 5
 *
 *     UpdateCommentRequest:
 *       type: object
 *       required:
 *         - comment
 *         - rate
 *       properties:
 *         comment:
 *           type: string
 *           example: "M√¨nh ƒë√£ h·ªçc xong b√†i n√†y, r·∫•t tuy·ªát!"
 *         rate:
 *           type: integer
 *           example: 4
 *
 *     SuccessResponse:
 *       type: object
 *       properties:
 *         message:
 *           type: string
 *           example: "‚úÖ Comment added successfully"
 */

/**
 * @swagger
 * /api/comments/ping:
 *   get:
 *     summary: Ki·ªÉm tra API ho·∫°t ƒë·ªông
 *     tags: [Comments]
 *     responses:
 *       200:
 *         description: API ƒëang ho·∫°t ƒë·ªông
 *         content:
 *           text/plain:
 *             example: "Comments API is working!"
 */

// ‚úÖ Test route
router.get("/ping", (req, res) => {
  res.send("Comments API is working!");
});

/**
 * @swagger
 * /api/comments:
 *   get:
 *     summary: L·∫•y danh s√°ch t·∫•t c·∫£ b√¨nh lu·∫≠n
 *     tags: [Comments]
 *     responses:
 *       200:
 *         description: Danh s√°ch b√¨nh lu·∫≠n
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Comment'
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå GET /api/comments
 * L·∫•y danh s√°ch t·∫•t c·∫£ b√¨nh lu·∫≠n
 */
router.get("/", async (req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request().query(`
      SELECT c.*, cu.full_name AS customer_name, l.lesson_name
      FROM Comments c
      JOIN Customers cu ON c.customer_id = cu.customer_id
      JOIN Lessons l ON c.lesson_id = l.lesson_id
      ORDER BY c.created_at DESC
    `);
    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå Error in GET /comments:", err.message);
    res.status(500).send("Server error");
  }
});

/**
 * @swagger
 * /api/comments/{id}:
 *   get:
 *     summary: L·∫•y b√¨nh lu·∫≠n theo ID
 *     tags: [Comments]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa b√¨nh lu·∫≠n
 *     responses:
 *       200:
 *         description: Th√¥ng tin chi ti·∫øt b√¨nh lu·∫≠n
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Comment'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå GET /api/comments/:id
 * L·∫•y b√¨nh lu·∫≠n theo ID
 */
router.get("/:id", async (req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request()
      .input("comment_id", sql.Int, req.params.id)
      .query(`
        SELECT c.*, cu.full_name AS customer_name, l.lesson_name
        FROM Comments c
        JOIN Customers cu ON c.customer_id = cu.customer_id
        JOIN Lessons l ON c.lesson_id = l.lesson_id
        WHERE c.comment_id = @comment_id
      `);

    if (result.recordset.length === 0) {
      return res.status(404).json({ message: "Comment not found" });
    }

    res.json(result.recordset[0]);
  } catch (err) {
    console.error("‚ùå Error in GET /comments/:id:", err.message);
    res.status(500).send("Server error");
  }
});

/**
 * @swagger
 * /api/comments/lesson/{lesson_id}:
 *   get:
 *     summary: L·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n c·ªßa m·ªôt b√†i h·ªçc c·ª• th·ªÉ
 *     tags: [Comments]
 *     parameters:
 *       - in: path
 *         name: lesson_id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID b√†i h·ªçc c·∫ßn xem b√¨nh lu·∫≠n
 *     responses:
 *       200:
 *         description: Danh s√°ch b√¨nh lu·∫≠n c·ªßa b√†i h·ªçc
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Comment'
 *       404:
 *         description: Kh√¥ng c√≥ b√¨nh lu·∫≠n cho b√†i h·ªçc n√†y
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå GET /api/comments/lesson/:lesson_id
 * L·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n c·ªßa m·ªôt b√†i h·ªçc
 */
router.get("/lesson/:lesson_id", async (req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request()
      .input("lesson_id", sql.Int, req.params.lesson_id)
      .query(`
        SELECT c.*, cu.full_name AS customer_name
        FROM Comments c
        JOIN Customers cu ON c.customer_id = cu.customer_id
        WHERE c.lesson_id = @lesson_id
        ORDER BY c.created_at DESC
      `);

    if (result.recordset.length === 0) {
      return res.status(404).json({ message: "No comments found for this lesson" });
    }

    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå Error in GET /comments/lesson/:lesson_id:", err.message);
    res.status(500).send("Server error");
  }
});

/**
 * @swagger
 * /api/comments/create:
 *   post:
 *     summary: Th√™m b√¨nh lu·∫≠n m·ªõi (ch·ªâ d√†nh cho customer)
 *     tags: [Comments]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/CreateCommentRequest'
 *     responses:
 *       201:
 *         description: Th√™m b√¨nh lu·∫≠n th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/SuccessResponse'
 *       400:
 *         description: Thi·∫øu d·ªØ li·ªáu ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå POST /api/comments
 * Th√™m b√¨nh lu·∫≠n m·ªõi
 * Required: customer_id, lesson_id, comment, rate
 */
router.post("/create", verifyToken, authorizeRoles("customer"), async (req, res) => {
  const { customer_id, lesson_id, comment, rate } = req.body;

  if (!customer_id || !lesson_id || !comment || rate === undefined) {
    return res.status(400).json({ message: "Missing required fields" });
  }

  if (rate < 1 || rate > 5) {
    return res.status(400).json({ message: "Rate must be between 1 and 5" });
  }

  try {
    const pool = await poolPromise;

    // üîç Ki·ªÉm tra customer_id
    const checkCustomer = await pool.request()
      .input("customer_id", sql.Int, customer_id)
      .query("SELECT COUNT(*) AS count FROM Customers WHERE customer_id = @customer_id");

    if (checkCustomer.recordset[0].count === 0) {
      return res.status(400).json({ message: "Invalid customer_id: customer not found" });
    }

    // üîç Ki·ªÉm tra lesson_id
    const checkLesson = await pool.request()
      .input("lesson_id", sql.Int, lesson_id)
      .query("SELECT COUNT(*) AS count FROM Lessons WHERE lesson_id = @lesson_id");

    if (checkLesson.recordset[0].count === 0) {
      return res.status(400).json({ message: "Invalid lesson_id: lesson not found" });
    }

    // ‚úÖ Th√™m b√¨nh lu·∫≠n
    await pool.request()
      .input("customer_id", sql.Int, customer_id)
      .input("lesson_id", sql.Int, lesson_id)
      .input("comment", sql.NVarChar(500), comment)
      .input("rate", sql.Int, rate)
      .query(`
        INSERT INTO Comments (customer_id, lesson_id, comment, rate, created_at)
        VALUES (@customer_id, @lesson_id, @comment, @rate, GETDATE())
      `);

    res.status(201).json({ message: "‚úÖ Comment added successfully" });
  } catch (err) {
    console.error("‚ùå Error in POST /comments:", err.message);
    res.status(500).send(err.message);
  }
});

/**
 * @swagger
 * /api/comments/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t b√¨nh lu·∫≠n (ch·ªâ d√†nh cho customer)
 *     tags: [Comments]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa b√¨nh lu·∫≠n c·∫ßn c·∫≠p nh·∫≠t
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/UpdateCommentRequest'
 *     responses:
 *       200:
 *         description: C·∫≠p nh·∫≠t th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n
 *       400:
 *         description: Thi·∫øu d·ªØ li·ªáu ho·∫∑c rate kh√¥ng h·ª£p l·ªá
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå PUT /api/comments/:id
 * C·∫≠p nh·∫≠t b√¨nh lu·∫≠n
 */
router.put("/:id", verifyToken, authorizeRoles("customer"), async (req, res) => {
  const { comment, rate } = req.body;

  if (!comment || rate === undefined) {
    return res.status(400).json({ message: "Missing required fields" });
  }

  if (rate < 1 || rate > 5) {
    return res.status(400).json({ message: "Rate must be between 1 and 5" });
  }

  try {
    const pool = await poolPromise;
    const result = await pool.request()
      .input("comment_id", sql.Int, req.params.id)
      .input("comment", sql.NVarChar(500), comment)
      .input("rate", sql.Int, rate)
      .query(`
        UPDATE Comments
        SET comment = @comment,
            rate = @rate
        WHERE comment_id = @comment_id
      `);

    if (result.rowsAffected[0] === 0) {
      return res.status(404).json({ message: "Comment not found" });
    }

    res.json({ message: "‚úÖ Comment updated successfully" });
  } catch (err) {
    console.error("‚ùå Error in PUT /comments/:id:", err.message);
    res.status(500).send(err.message);
  }
});

/**
 * @swagger
 * /api/comments/{id}:
 *   delete:
 *     summary: X√≥a b√¨nh lu·∫≠n (ch·ªâ admin ho·∫∑c customer)
 *     tags: [Comments]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa b√¨nh lu·∫≠n c·∫ßn x√≥a
 *     responses:
 *       200:
 *         description: X√≥a b√¨nh lu·∫≠n th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå DELETE /api/comments/:id
 * X√≥a b√¨nh lu·∫≠n
 */
router.delete("/:id", verifyToken, authorizeRoles("admin", "customer"), async (req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request()
      .input("comment_id", sql.Int, req.params.id)
      .query("DELETE FROM Comments WHERE comment_id = @comment_id");

    if (result.rowsAffected[0] === 0) {
      return res.status(404).json({ message: "Comment not found" });
    }

    res.json({ message: "‚úÖ Comment deleted successfully" });
  } catch (err) {
    console.error("‚ùå Error in DELETE /comments/:id:", err.message);
    res.status(500).send(err.message);
  }
});

module.exports = router;

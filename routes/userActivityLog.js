const express = require("express");
const router = express.Router();
const { sql, poolPromise } = require("../db");
const { verifyToken, authorizeRoles } = require("../security/verifyToken");

/**
 * @swagger
 * tags:
 *   name: UserActivity
 *   description: API qu·∫£n l√Ω l·ªãch s·ª≠ ho·∫°t ƒë·ªông h·ªçc t·∫≠p (User Activity Log)
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     Activity:
 *       type: object
 *       properties:
 *         activity_id:
 *           type: integer
 *           example: 1
 *         user_id:
 *           type: integer
 *           example: 5
 *         full_name:
 *           type: string
 *           example: "Nguy·ªÖn VƒÉn A"
 *         activity_date:
 *           type: string
 *           format: date
 *           example: "2025-10-10"
 *     SuccessResponse:
 *       type: object
 *       properties:
 *         message:
 *           type: string
 *           example: "‚úÖ Activity logged successfully for today."
 *     ErrorResponse:
 *       type: object
 *       properties:
 *         message:
 *           type: string
 *           example: "Server error"
 */

/**
 * @swagger
 * /api/activity:
 *   get:
 *     summary: L·∫•y to√†n b·ªô l·ªãch s·ª≠ ho·∫°t ƒë·ªông ng∆∞·ªùi d√πng (ch·ªâ admin ho·∫∑c employee)
 *     tags: [UserActivity]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Danh s√°ch l·ªãch s·ª≠ ho·∫°t ƒë·ªông ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Activity'
 *       401:
 *         description: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */
router.get("/", verifyToken, authorizeRoles("admin", "employee"), async (req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request().query(`
      SELECT a.*, u.full_name
      FROM UserActivityLog a
      JOIN Users u ON a.user_id = u.user_id
      ORDER BY a.activity_date DESC
    `);
    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå Error in GET /activity:", err.message);
    res.status(500).json({ message: "Server error", error: err.message });
  }
});

/**
 * @swagger
 * /api/activity/log:
 *   post:
 *     summary: Ghi nh·∫≠n ho·∫°t ƒë·ªông h·ªçc t·∫≠p trong ng√†y (ng∆∞·ªùi d√πng t·ª± ƒë·ªông log 1 l·∫ßn/ng√†y)
 *     description: 
 *       - N·∫øu user h·ªçc l·∫ßn ƒë·∫ßu h√¥m nay ‚Üí h·ªá th·ªëng s·∫Ω th√™m b·∫£n ghi m·ªõi.  
 *       - N·∫øu ƒë√£ c√≥ log trong ng√†y ‚Üí s·∫Ω b·ªè qua ƒë·ªÉ tr√°nh tr√πng l·∫∑p.
 *     tags: [UserActivity]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Log ho·∫°t ƒë·ªông th√†nh c√¥ng ho·∫∑c ƒë√£ t·ªìn t·∫°i
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/SuccessResponse'
 *       401:
 *         description: Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá
 *       403:
 *         description: Kh√¥ng th·ªÉ ghi log thay ng∆∞·ªùi kh√°c
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */
router.post("/log", verifyToken, authorizeRoles("customer", "employee", "admin"), async (req, res) => {
  const user_id = req.user.id;
  const today = new Date().toISOString().split("T")[0];

  try {
    const pool = await poolPromise;

    // üîí Ch·∫∑n log cho ng∆∞·ªùi kh√°c
    if (req.body.user_id && req.body.user_id !== user_id) {
      return res.status(403).json({ message: "You can only log your own activity" });
    }

    // üîç Ki·ªÉm tra ƒë√£ c√≥ log h√¥m nay ch∆∞a
    const check = await pool.request()
      .input("user_id", sql.Int, user_id)
      .input("activity_date", sql.Date, today)
      .query(`
        SELECT COUNT(*) AS count
        FROM UserActivityLog
        WHERE user_id = @user_id AND activity_date = @activity_date
      `);

    if (check.recordset[0].count > 0) {
      return res.json({ message: "User has already logged activity today." });
    }

    // ‚úÖ Ghi log m·ªõi
    await pool.request()
      .input("user_id", sql.Int, user_id)
      .input("activity_date", sql.Date, today)
      .query(`
        INSERT INTO UserActivityLog (user_id, activity_date)
        VALUES (@user_id, @activity_date)
      `);

    res.json({ message: "‚úÖ Activity logged successfully for today." });
  } catch (err) {
    console.error("‚ùå Error in POST /activity/log:", err.message);
    res.status(500).json({ message: "Server error", error: err.message });
  }
});

/**
 * @swagger
 * /api/activity/{user_id}:
 *   get:
 *     summary: L·∫•y l·ªãch s·ª≠ ho·∫°t ƒë·ªông c·ªßa 1 h·ªçc vi√™n c·ª• th·ªÉ
 *     tags: [UserActivity]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: user_id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn xem l·ªãch s·ª≠
 *     responses:
 *       200:
 *         description: Danh s√°ch ho·∫°t ƒë·ªông ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Activity'
 *       403:
 *         description: Ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ph√©p xem l·ªãch s·ª≠ c·ªßa ng∆∞·ªùi kh√°c
 *       404:
 *         description: Kh√¥ng c√≥ d·ªØ li·ªáu
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */
router.get("/:user_id", verifyToken, authorizeRoles("admin", "employee", "customer"), async (req, res) => {
  try {
    if (req.user.role === "customer" && req.user.id !== parseInt(req.params.user_id)) {
      return res.status(403).json({ message: "You can only view your own activity log" });
    }

    const pool = await poolPromise;
    const result = await pool.request()
      .input("user_id", sql.Int, req.params.user_id)
      .query(`
        SELECT activity_id, user_id, activity_date
        FROM UserActivityLog
        WHERE user_id = @user_id
        ORDER BY activity_date DESC
      `);

    if (result.recordset.length === 0) {
      return res.status(404).json({ message: "No activity found for this user" });
    }

    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå Error in GET /activity/:user_id:", err.message);
    res.status(500).json({ message: "Server error", error: err.message });
  }
});

/**
 * @swagger
 * /api/activity/{id}:
 *   delete:
 *     summary: X√≥a 1 b·∫£n ghi ho·∫°t ƒë·ªông (ch·ªâ admin ho·∫∑c employee)
 *     tags: [UserActivity]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa b·∫£n ghi ho·∫°t ƒë·ªông c·∫ßn x√≥a
 *     responses:
 *       200:
 *         description: X√≥a th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/SuccessResponse'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b·∫£n ghi
 *       401:
 *         description: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */
router.delete("/:id", verifyToken, authorizeRoles("admin", "employee"), async (req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request()
      .input("activity_id", sql.Int, req.params.id)
      .query("DELETE FROM UserActivityLog WHERE activity_id = @activity_id");

    if (result.rowsAffected[0] === 0) {
      return res.status(404).json({ message: "Activity not found" });
    }

    res.json({ message: "‚úÖ Activity deleted successfully" });
  } catch (err) {
    console.error("‚ùå Error in DELETE /activity/:id:", err.message);
    res.status(500).json({ message: "Server error", error: err.message });
  }
});

module.exports = router;

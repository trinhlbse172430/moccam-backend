const express = require("express");
const router = express.Router();
const { sql, poolPromise } = require("../db");
const { verifyToken, authorizeRoles } = require("../security/verifyToken");


/**
 * @swagger
 * tags:
 *   name: Hand Motions
 *   description: API qu·∫£n l√Ω d·ªØ li·ªáu chuy·ªÉn ƒë·ªông tay (AI Motion Tracking) trong b√†i h·ªçc
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     HandMotion:
 *       type: object
 *       properties:
 *         motion_id:
 *           type: integer
 *           example: 1
 *         lesson_id:
 *           type: integer
 *           example: 5
 *         model_id:
 *           type: integer
 *           example: 2
 *         motion_data:
 *           type: string
 *           description: D·ªØ li·ªáu JSON ho·∫∑c chu·ªói ch·ª©a to·∫° ƒë·ªô chuy·ªÉn ƒë·ªông tay
 *           example: '{"x":120,"y":250,"timestamp":1697032200}'
 *         description:
 *           type: string
 *           example: "M√¥ ph·ªèng ƒë·ªông t√°c nh·∫•n d√¢y trong ƒë√†n tranh"
 *         created_at:
 *           type: string
 *           format: date-time
 *           example: "2025-10-10T10:00:00Z"
 *
 *     CreateHandMotionRequest:
 *       type: object
 *       required:
 *         - lesson_id
 *         - model_id
 *         - motion_data
 *       properties:
 *         lesson_id:
 *           type: integer
 *           example: 5
 *         model_id:
 *           type: integer
 *           example: 2
 *         motion_data:
 *           type: string
 *           example: '{"motion":"up-down","accuracy":98.7}'
 *         description:
 *           type: string
 *           example: "M√¥ h√¨nh AI ghi nh·∫≠n ƒë·ªông t√°c ƒë√∫ng chu·∫©n"
 *
 *     UpdateHandMotionRequest:
 *       type: object
 *       required:
 *         - lesson_id
 *         - model_id
 *         - motion_data
 *       properties:
 *         lesson_id:
 *           type: integer
 *           example: 5
 *         model_id:
 *           type: integer
 *           example: 2
 *         motion_data:
 *           type: string
 *           example: '{"motion":"down-up","accuracy":96.5}'
 *         description:
 *           type: string
 *           example: "C·∫≠p nh·∫≠t m√¥ ph·ªèng ƒë·ªông t√°c m·ªõi"
 */

/**
 * @swagger
 * /api/hand-motions/ping:
 *   get:
 *     summary: Ki·ªÉm tra API ho·∫°t ƒë·ªông
 *     tags: [Hand Motions]
 *     responses:
 *       200:
 *         description: API ho·∫°t ƒë·ªông t·ªët
 *         content:
 *           text/plain:
 *             example: "Hand Motions API is working!"
 */

// ‚úÖ Test route
router.get("/ping", (req, res) => {
  res.send("Hand Motions API is working!");
});

/**
 * @swagger
 * /api/hand-motions:
 *   get:
 *     summary: L·∫•y danh s√°ch t·∫•t c·∫£ hand motions
 *     tags: [Hand Motions]
 *     responses:
 *       200:
 *         description: Danh s√°ch c√°c hand motion
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/HandMotion'
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå GET /api/hand-motions
 * L·∫•y danh s√°ch t·∫•t c·∫£ hand motions
 */
router.get("/", async (req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request().query("SELECT * FROM Hand_Motions");
    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå Error in GET /hand-motions:", err.message);
    res.status(500).send("Server error");
  }
});

/**
 * @swagger
 * /api/hand-motions/{id}:
 *   get:
 *     summary: L·∫•y hand motion theo ID
 *     tags: [Hand Motions]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa hand motion
 *     responses:
 *       200:
 *         description: Th√¥ng tin chi ti·∫øt hand motion
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/HandMotion'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y hand motion
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå GET /api/hand-motions/:id
 * L·∫•y hand motion theo ID
 */
router.get("/:id", async (req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request()
      .input("motion_id", sql.Int, req.params.id)
      .query("SELECT * FROM Hand_Motions WHERE motion_id = @motion_id");

    if (result.recordset.length === 0) {
      return res.status(404).json({ message: "Hand motion not found" });
    }

    res.json(result.recordset[0]);
  } catch (err) {
    console.error("‚ùå Error in GET /hand-motions/:id:", err.message);
    res.status(500).send("Server error");
  }
});

/**
 * @swagger
 * /api/hand-motions/create:
 *   post:
 *     summary: T·∫°o m·ªõi hand motion (ch·ªâ admin ho·∫∑c employee)
 *     tags: [Hand Motions]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/CreateHandMotionRequest'
 *     responses:
 *       201:
 *         description: T·∫°o hand motion th√†nh c√¥ng
 *       400:
 *         description: Thi·∫øu ho·∫∑c sai d·ªØ li·ªáu ƒë·∫ßu v√†o
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå POST /api/hand-motions
 * Th√™m hand motion m·ªõi
 * Required: lesson_id, model_id, motion_data
 */
router.post("/create", verifyToken, authorizeRoles("admin", "employee"), async (req, res) => {
  const { lesson_id, model_id, motion_data, description } = req.body;

  if (!lesson_id || !model_id || !motion_data) {
    return res.status(400).json({ message: "Missing required fields: lesson_id, model_id, motion_data" });
  }

  try {
    const pool = await poolPromise;

    // üîç Ki·ªÉm tra lesson_id t·ªìn t·∫°i
    const checkLesson = await pool.request()
      .input("lesson_id", sql.Int, lesson_id)
      .query("SELECT COUNT(*) AS count FROM Lessons WHERE lesson_id = @lesson_id");

    if (checkLesson.recordset[0].count === 0) {
      return res.status(400).json({ message: "Invalid lesson_id: lesson not found" });
    }

    // üîç Ki·ªÉm tra model_id t·ªìn t·∫°i
    const checkModel = await pool.request()
      .input("model_id", sql.Int, model_id)
      .query("SELECT COUNT(*) AS count FROM AI_Models WHERE model_id = @model_id");

    if (checkModel.recordset[0].count === 0) {
      return res.status(400).json({ message: "Invalid model_id: model not found" });
    }

    // ‚úÖ Th√™m m·ªõi hand motion
    await pool.request()
      .input("lesson_id", sql.Int, lesson_id)
      .input("model_id", sql.Int, model_id)
      .input("motion_data", sql.NVarChar(sql.MAX), motion_data)
      .input("description", sql.NVarChar(200), description || null)
      .query(`
        INSERT INTO Hand_Motions (lesson_id, model_id, motion_data, description, created_at)
        VALUES (@lesson_id, @model_id, @motion_data, @description, GETDATE())
      `);

    res.status(201).json({ message: "‚úÖ Hand motion added successfully" });
  } catch (err) {
    console.error("‚ùå Error in POST /hand-motions:", err.message);
    res.status(500).send(err.message);
  }
});

/**
 * @swagger
 * /api/hand-motions/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t hand motion (ch·ªâ admin ho·∫∑c employee)
 *     tags: [Hand Motions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa hand motion c·∫ßn c·∫≠p nh·∫≠t
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/UpdateHandMotionRequest'
 *     responses:
 *       200:
 *         description: C·∫≠p nh·∫≠t th√†nh c√¥ng
 *       400:
 *         description: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y hand motion
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå PUT /api/hand-motions/:id
 * C·∫≠p nh·∫≠t hand motion
 */
router.put("/:id", verifyToken, authorizeRoles("admin", "employee"), async (req, res) => {
  const { lesson_id, model_id, motion_data, description } = req.body;

  if (!lesson_id || !model_id || !motion_data) {
    return res.status(400).json({ message: "Missing required fields: lesson_id, model_id, motion_data" });
  }

  try {
    const pool = await poolPromise;

    // üîç Ki·ªÉm tra lesson_id
    const checkLesson = await pool.request()
      .input("lesson_id", sql.Int, lesson_id)
      .query("SELECT COUNT(*) AS count FROM Lessons WHERE lesson_id = @lesson_id");
    if (checkLesson.recordset[0].count === 0) {
      return res.status(400).json({ message: "Invalid lesson_id: lesson not found" });
    }

    // üîç Ki·ªÉm tra model_id
    const checkModel = await pool.request()
      .input("model_id", sql.Int, model_id)
      .query("SELECT COUNT(*) AS count FROM AI_Models WHERE model_id = @model_id");
    if (checkModel.recordset[0].count === 0) {
      return res.status(400).json({ message: "Invalid model_id: model not found" });
    }

    const result = await pool.request()
      .input("motion_id", sql.Int, req.params.id)
      .input("lesson_id", sql.Int, lesson_id)
      .input("model_id", sql.Int, model_id)
      .input("motion_data", sql.NVarChar(sql.MAX), motion_data)
      .input("description", sql.NVarChar(200), description || null)
      .query(`
        UPDATE Hand_Motions
        SET lesson_id = @lesson_id,
            model_id = @model_id,
            motion_data = @motion_data,
            description = @description
        WHERE motion_id = @motion_id
      `);

    if (result.rowsAffected[0] === 0) {
      return res.status(404).json({ message: "Hand motion not found" });
    }

    res.json({ message: "‚úÖ Hand motion updated successfully" });
  } catch (err) {
    console.error("‚ùå Error in PUT /hand-motions/:id:", err.message);
    res.status(500).send(err.message);
  }
});

/**
 * @swagger
 * /api/hand-motions/{id}:
 *   delete:
 *     summary: X√≥a hand motion (ch·ªâ admin ho·∫∑c employee)
 *     tags: [Hand Motions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa hand motion c·∫ßn x√≥a
 *     responses:
 *       200:
 *         description: X√≥a th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y hand motion
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå DELETE /api/hand-motions/:id
 * X√≥a hand motion
 */
router.delete("/:id", verifyToken, authorizeRoles("admin", "employee"), async (req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request()
      .input("motion_id", sql.Int, req.params.id)
      .query("DELETE FROM Hand_Motions WHERE motion_id = @motion_id");

    if (result.rowsAffected[0] === 0) {
      return res.status(404).json({ message: "Hand motion not found" });
    }

    res.json({ message: "‚úÖ Hand motion deleted successfully" });
  } catch (err) {
    console.error("‚ùå Error in DELETE /hand-motions/:id:", err.message);
    res.status(500).send(err.message);
  }
});

module.exports = router;

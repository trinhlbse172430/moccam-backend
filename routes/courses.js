const express = require("express");
const router = express.Router();
const { sql, poolPromise } = require("../db");
const { verifyToken, authorizeRoles } = require("../security/verifyToken");


/**
 * @swagger
 * tags:
 *   name: Courses
 *   description: API qu·∫£n l√Ω kh√≥a h·ªçc trong h·ªá th·ªëng
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     Course:
 *       type: object
 *       properties:
 *         course_id:
 *           type: integer
 *           example: 1
 *         course_name:
 *           type: string
 *           example: "ƒê√†n Tranh C∆° B·∫£n"
 *         description:
 *           type: string
 *           example: "Kh√≥a h·ªçc nh·∫≠p m√¥n d√†nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu h·ªçc ƒë√†n Tranh."
 *         level:
 *           type: string
 *           example: "Beginner"
 *         created_by:
 *           type: integer
 *           example: 5
 *         is_free:
 *           type: boolean
 *           example: false
 *         created_at:
 *           type: string
 *           example: "2025-10-07T10:30:00Z"
 *     CreateCourse:
 *       type: object
 *       required:
 *         - course_name
 *         - level
 *         - created_by
 *       properties:
 *         course_name:
 *           type: string
 *           example: "H·ªçc ƒê√†n Tranh N√¢ng Cao"
 *         description:
 *           type: string
 *           example: "D√†nh cho h·ªçc vi√™n ƒë√£ c√≥ ki·∫øn th·ª©c c∆° b·∫£n."
 *         level:
 *           type: string
 *           example: "Advanced"
 *         created_by:
 *           type: integer
 *           example: 3
 *         is_free:
 *           type: boolean
 *           example: true
 */

/**
 * @swagger
 * /api/courses/ping:
 *   get:
 *     summary: Ki·ªÉm tra API ho·∫°t ƒë·ªông
 *     tags: [Courses]
 *     responses:
 *       200:
 *         description: Courses API is working
 */
// ‚úÖ Test route
router.get("/ping", (req, res) => {
    res.send("Courses API is working!");
});

/**
 * @swagger
 * /api/courses:
 *   get:
 *     summary: L·∫•y danh s√°ch t·∫•t c·∫£ kh√≥a h·ªçc
 *     tags: [Courses]
 *     responses:
 *       200:
 *         description: Danh s√°ch kh√≥a h·ªçc ƒë∆∞·ª£c tr·∫£ v·ªÅ
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Course'
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå L·∫•y t·∫•t c·∫£ kh√≥a h·ªçc
 * GET /api/courses
 */
router.get("/", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT * FROM Courses");
        res.json(result.recordset);
    } catch (err) {
        console.error("‚ùå Error in GET /courses:", err.message);
        res.status(500).send("Server error");
    }
});

/**
 * @swagger
 * /api/courses/{id}:
 *   get:
 *     summary: L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt kh√≥a h·ªçc theo ID
 *     tags: [Courses]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa kh√≥a h·ªçc c·∫ßn xem
 *     responses:
 *       200:
 *         description: Th√¥ng tin chi ti·∫øt c·ªßa kh√≥a h·ªçc
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Course'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå L·∫•y kh√≥a h·ªçc theo ID
 * GET /api/courses/:id
 */
router.get("/:id", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .input("course_id", sql.Int, req.params.id)
            .query("SELECT * FROM Courses WHERE course_id = @course_id");

        if (result.recordset.length === 0) {
            return res.status(404).json({ message: "Course not found" });
        }

        res.json(result.recordset[0]);
    } catch (err) {
        console.error("‚ùå Error in GET /courses/:id:", err.message);
        res.status(500).send("Server error");
    }
});

/**
 * @swagger
 * /api/courses/create:
 *   post:
 *     summary: Th√™m m·ªõi m·ªôt kh√≥a h·ªçc (Admin ho·∫∑c Employee)
 *     tags: [Courses]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/CreateCourse'
 *     responses:
 *       201:
 *         description: T·∫°o kh√≥a h·ªçc th√†nh c√¥ng
 *         content:
 *           application/json:
 *             example:
 *               message: "‚úÖ Course added successfully"
 *       400:
 *         description: Thi·∫øu th√¥ng tin ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
 *       401:
 *         description: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå Th√™m kh√≥a h·ªçc m·ªõi
 * POST /api/courses
 */
router.post("/create", verifyToken, authorizeRoles("admin", "employee"), async (req, res) => {
    const created_by = req.user.id; 
    const { course_name, description, level, is_free } = req.body;

    // C·∫≠p nh·∫≠t validation (kh√¥ng c·∫ßn created_by n·ªØa)
    if (!course_name || !level ) {
        return res.status(400).json({ message: "Missing required fields: course_name, level" });
    }

    try {
        const pool = await poolPromise;
        
        // X·ª≠ l√Ω is_free: n·∫øu kh√¥ng g·ª≠i th√¨ m·∫∑c ƒë·ªãnh l√† 0 (false)
        const isFreeBit = (is_free === true || is_free === 1) ? 1 : 0;

        await pool.request()
            .input("course_name", sql.NVarChar(100), course_name)
            .input("description", sql.NVarChar(200), description || null)
            .input("level", sql.VarChar(20), level)
            .input("is_free", sql.Bit, isFreeBit) // D√πng bi·∫øn ƒë√£ x·ª≠ l√Ω
            .input("created_by", sql.Int, created_by) // D√πng created_by l·∫•y t·ª´ token
            .query(`
                INSERT INTO Courses (course_name, description, level, created_by, is_free, created_at)
                VALUES (@course_name, @description, @level, @created_by, @is_free, GETDATE())
            `);

        res.status(201).json({ message: "‚úÖ Course added successfully" });
    } catch (err) {
        console.error("‚ùå Error in POST /courses:", err.message);
        res.status(500).send("Server error");
    }
});

/**
 * @swagger
 * /api/courses/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t th√¥ng tin kh√≥a h·ªçc (Admin ho·∫∑c Employee)
 *     tags: [Courses]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa kh√≥a h·ªçc c·∫ßn c·∫≠p nh·∫≠t
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/CreateCourse'
 *     responses:
 *       200:
 *         description: C·∫≠p nh·∫≠t th√†nh c√¥ng
 *         content:
 *           application/json:
 *             example:
 *               message: "‚úÖ Course updated successfully"
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå C·∫≠p nh·∫≠t kh√≥a h·ªçc
 * PUT /api/courses/:id
 */

router.put("/:id", verifyToken, authorizeRoles("admin", "employee"), async (req, res) => {
    const { course_name, description, level, created_by, is_free } = req.body;

    if (!course_name || !level || typeof created_by === "undefined") {
        return res.status(400).json({ message: "Missing required fields: course_name, level, created_by" });
    }

    try {
        const pool = await poolPromise;
        const is_free = (is_free === undefined || is_free === null) ? 0 : (is_free ? 1 : 0);
        const checkCourse = await pool.request()
            .input("created_by", sql.Int, created_by)
            .query("SELECT COUNT(*) AS count FROM Courses WHERE created_by = @created_by");
        if (checkCourse.recordset[0].count === 0) {
            return res.status(400).json({ message: "Invalid created_by: employee not found" });
        }
        await pool.request()
            .input("course_id", sql.Int, req.params.id)
            .input("course_name", sql.NVarChar(100), course_name)
            .input("description", sql.NVarChar(200), description || null)
            .input("level", sql.VarChar(20), level || 0)
            .input("is_free", sql.Bit, is_free)
            .input("created_by", sql.Int, created_by)
            .query(`
                UPDATE Courses
                SET course_name = @course_name,
                    description = @description,
                    level = @level,
                    is_free = @is_free
                    created_by = @created_by
                WHERE course_id = @course_id
            `);

        if (result.rowsAffected[0] === 0) {
            return res.status(404).json({ message: "Course not found" });
        }

        res.json({ message: "‚úÖ Course updated successfully" });
    } catch (err) {
        console.error("‚ùå Error in PUT /courses/:id:", err.message);
        res.status(500).send("Server error");
    }
});

/**
 * @swagger
 * /api/courses/{id}:
 *   delete:
 *     summary: X√≥a kh√≥a h·ªçc (Admin ho·∫∑c Employee)
 *     tags: [Courses]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID c·ªßa kh√≥a h·ªçc c·∫ßn x√≥a
 *     responses:
 *       200:
 *         description: X√≥a th√†nh c√¥ng
 *         content:
 *           application/json:
 *             example:
 *               message: "‚úÖ Course deleted successfully"
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc
 *       500:
 *         description: L·ªói m√°y ch·ªß
 */

/**
 * üìå X√≥a kh√≥a h·ªçc
 * DELETE /api/courses/:id
 */
router.delete("/:id", verifyToken, authorizeRoles("admin", "employee"), async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .input("course_id", sql.Int, req.params.id)
            .query("DELETE FROM Courses WHERE course_id = @course_id");

        if (result.rowsAffected[0] === 0) {
            return res.status(404).json({ message: "Course not found" });
        }

        res.json({ message: "‚úÖ Course deleted successfully" });
    } catch (err) {
        console.error("‚ùå Error in DELETE /courses/:id:", err.message);
        res.status(500).send("Server error");
    }
});

module.exports = router;
